{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/Navbar/Navbar.module.css","hoc/withAuthRedirect.tsx","Redux/dialogs_reducer.tsx","utils/object-helper.ts","Redux/users-reducer.tsx","api/api.tsx","components/Header/Header.tsx","Redux/auth_reducer.tsx","components/Header/HeaderContainer.tsx","components/Navbar/Navbar.tsx","components/Login/Login.tsx","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/profile_reducer.tsx","components/Profile/Myposts/Post/Post.tsx","components/Profile/Myposts/Myposts.tsx","components/Profile/Myposts/MypostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","Redux/app_reducer.tsx","Redux/sidebar_reducer.tsx","Redux/redux-store.tsx","App.tsx","index.tsx","utils/validators/validators.tsx","AppWrapper.module.css","preloader.svg","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Login/Login.module.css","components/Profile/Myposts/Myposts.module.css","components/Profile/Myposts/Post/Post.module.css"],"names":["FormControl","meta","children","hasError","touched","error","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","SEND_MESSAGE","DELETE_MESSAGE","initialState","dialogs","id","messages","v1","message","newMessageText","sendMessageAC","type","dialogsReducer","action","filter","m","messageId","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","pageSize","totalUsersCount","page","isFetching","followingInProgress","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","followSuccess","userId","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","count","toggleIsFetching","toggleFollowingProgress","requestUsers","dispatch","a","usersAPI","getUsers","data","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","follow","bind","unfollow","usersReducer","followed","instance","axios","create","withCredentials","baseURL","headers","currentPage","get","then","responce","post","delete","getProfile","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","logout","Header","classes","header","src","alt","loginBlock","onClick","SET_USER_DATA","setAuthUserData","getAuthUserData","response","authReducer","HeaderContainer","this","React","length","stopSubmit","_error","Navbar","nav","item","active","icon","fixedWidth","activeLink","LoginReduxFrom","reduxForm","form","handleSubmit","onSubmit","required","style","formSummaryError","loginTC","path","s","loginContainer","Contact","contactTitle","contactValue","ProfileDataFormReduxForm","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","key","ProfileInfo","Preloader","content","discriptionBlock","ava","photos","large","target","files","initialValues","profileInitialState","posts","likesCount","newPostText","small","github","vk","facebook","instagram","twitter","website","youtube","mainLink","deletePostAC","postId","DELETE_POST","setUserProfileAC","SET_USER_PROFILE","SET_STATUS","ADD_POST","SAVE_PHOTO_SUCCESS","profileReducer","newPost","Date","now","p","Post","useDispatch","button","maxLength10","maxLengthCreator","AddMyPostFormReduxFrom","Field","Myposts","postsElements","postBlock","values","addPost","MyPostContainer","profilePage","addPostActionCreator","deletePost","Profile","ProfileContainer","match","params","authorizedUserId","history","push","getUserProfile","refreshProfile","compose","file","getState","withRouter","INITIALIZED_SUCCESS","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","dialogPage","sidebar","usersPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","DialogsContainer","lazy","UsersContainer","App","initializeApp","appWrapper","navbar","main","render","fallback","AppContainer","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","maxLength","background","preloader"],"mappings":"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","file":"static/js/main.63b55e04.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = ({ meta, children }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n    )\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n    )\r\n}\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: React.FC<WrappedFieldProps>, props = {}, text = \"\") => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3gUxF\",\"item\":\"Navbar_item__3B_K_\"};","import React, {ComponentType} from 'react';\r\n\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = ( state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}","import { v1 } from \"uuid\"\r\n\r\n/* export type UpdateNewMessageTextType = {\r\n    type: 'dialogs/UPDATE-NEW-MESSAGE-TEXT'\r\n    newMessage: string\r\n} */\r\n\r\nexport type SendMessageType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageText: string\r\n}\r\nexport type DeleteMessageType = {\r\n    type: typeof DELETE_MESSAGE\r\n    messageId: string\r\n}\r\n\r\nexport const UPDATE_NEW_MESSAGE_TEXT = 'dialogs/UPDATE-NEW-MESSAGE-TEXT'\r\nexport const SEND_MESSAGE = 'dialogs/SEND-MESSAGE'\r\nexport const DELETE_MESSAGE = 'dialogs/DELETE-MESSAGE'\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: \"Dimych\" },\r\n        { id: 2, name: \"Sasha\" },\r\n        { id: 3, name: \"Andrey\" },\r\n        { id: 4, name: \"Sveta\" },\r\n        { id: 5, name: \"Igor\" }\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        { id: v1(), message: \"Hi!\" },\r\n        { id: v1(), message: \"Hello my frieds!\" },\r\n        { id: v1(), message: \"Go Dota?\" },\r\n        { id: v1(), message: \"Yes!\" },\r\n        { id: v1(), message: \"La-la-la\" }\r\n    ] as Array<MessageType>,\r\n    newMessageText: 'it-kamasutra.com'\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type DialogActionsType = SendMessageType | DeleteMessageType\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DialogActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        /*  case UPDATE_NEW_MESSAGE_TEXT:\r\n             return {\r\n                 ...state,\r\n                 newMessageText: action.newMessage\r\n             }; */\r\n        case SEND_MESSAGE:\r\n            let text = action.newMessageText\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, { id: v1(), message: text }],\r\n            };\r\n        case DELETE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m => m.id !== action.messageId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMessageText: string): SendMessageType => ({ type: SEND_MESSAGE, newMessageText })\r\nexport const deleteMessageAC = (messageId: string): DeleteMessageType => ({ type: DELETE_MESSAGE, messageId })\r\n\r\nexport default dialogsReducer;","import { UsersType } from \"../Redux/users-reducer\";\r\n\r\ninterface IFilters {\r\n    map(arg0: (u: any) => any): UsersType[];\r\n  }\r\n\r\nexport let updateObjectInArray = (items: IFilters, itemId: number, objPropName: string, newObjProps: {followed: boolean}) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { usersAPI } from \"../api/api\";\r\nimport { updateObjectInArray } from \"../utils/object-helper\";\r\n\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    name: string\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: Array<LocationType>\r\n    photos: PhotosType\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type UsersActionsType =\r\n    FollowActionType |\r\n    UnFollowActionType |\r\n    SetUsersActionType |\r\n    SetCurrentPageActionType |\r\n    SetTotalUsersCountActionType |\r\n    ToggleIsFetchingActionType |\r\n    ToggleIsFollowingProgressType\r\n\r\nexport type FollowActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\n\r\nexport type UnFollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\nexport type SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\n\r\nexport type SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    page: number\r\n}\r\n\r\nexport type SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\n\r\nexport type ToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ToggleIsFollowingProgressType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    page: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nconst FOLLOW = 'users/FOLLOW'\r\nconst UNFOLLOW = 'users/UNFOLLOW'\r\nconst SET_USERS = 'users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: true })\r\n                /*   users: state.users.map(u => {\r\n                      if (u.id === action.userId) {\r\n                          return { ...u, followed: true }\r\n                      }\r\n                      return u;\r\n                  }) */\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: false })\r\n                /*   users: state.users.map(u => {\r\n                      if (u.id === action.userId) {\r\n                          return { ...u, followed: false }\r\n                      }\r\n                      return u;\r\n                  }) */\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => ({ type: FOLLOW, userId })\r\nexport const unfollowSuccess = (userId: number) => ({ type: UNFOLLOW, userId })\r\nexport const setUsers = (users: Array<UsersType>) => ({ type: SET_USERS, users })\r\nexport const setCurrentPage = (page: number) => ({ type: SET_CURRENT_PAGE, page })\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\nexport const toggleIsFetching = (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page))\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\nconst followUnfollowFlow = async (dispatch: Dispatch<any>, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import axios from \"axios\";\r\nimport { ProfileType } from \"../Redux/profile_reducer\";\r\nimport { UsersType } from \"./../Redux/users-reducer\"\r\n\r\ntype TypeofUsers = {\r\n    items: Array<UsersType>\r\n    error: string | null\r\n    totalCount: number\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { \"API-KEY\": \"809d50f8-0790-4db8-ac8b-7ff6bbc71c22\" }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<TypeofUsers>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(responce => {\r\n                return responce.data;\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get('profile/' + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get('profile/status/' + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', { status: status });\r\n    },\r\n    savePhoto(photoFile: string) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put('profile', { profile });\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\n\r\ntype AuthType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => (dispatch: any) => void\r\n}\r\n\r\nconst Header = (props: AuthType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src='https://wp.nkdev.info/youplay/demo-shooter/wp-content/themes/youplay/assets/images/logo-light.png'\r\n                 alt={\"logo\"}/>\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <Link to={'/login'}>Login</Link>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import { authAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\n\r\nexport type DataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type SetUserActionType = {\r\n    type: typeof SET_USER_DATA\r\n    data: DataType\r\n}\r\n\r\nexport type AuthActionsType = SetUserActionType\r\n\r\nlet initialState: DataType = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({ type: SET_USER_DATA, data: { id, email, login, isAuth } }) as const\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<AuthActionsType>) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let { id, login, email } = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n}\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", { _error: message }))\r\n    }\r\n}\r\n\r\nexport default authReducer","import React from 'react';\r\nimport Header from './Header'\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {logout} from \"../../Redux/auth_reducer\";\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: any\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type AuthMePropsType = MapStateToPropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<AuthMePropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import {Link} from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n            <FontAwesomeIcon icon={['fal', 'home']} fixedWidth /><Link to=\"/profile\" className={classes.activeLink}> Profile</Link>\r\n            </div>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <Link to=\"/dialogs\" className={classes.activeLink}>Messages</Link>\r\n            </div>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <Link to=\"/users\" className={classes.activeLink}>Users</Link>\r\n            </div>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <Link to=\"/news \" className={classes.activeLink}>News</Link>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <Link to=\"/musik\" className={classes.activeLink}> Music</Link>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <Link to=\"/settigs\" className={classes.activeLink}>Settings</Link>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { createField, Input } from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginTC } from \"../../Redux/auth_reducer\";\r\nimport { AppStateType } from \"../../Redux/redux-store\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport s from \"./Login.module.css\"\r\nimport { Route } from 'react-router-dom';\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, { type: \"password\" })}\r\n            {createField(null, \"rememberMe\", [], Input, { type: \"checkbox\" }, \"rememberMe\")}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxFrom = reduxForm<FormDataType>({ form: 'login' })(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => { // в props придут все значения из data\r\n        props.loginTC(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return  <Route path={\"/profile\"} />\r\n    }\r\n\r\n    return <div className={s.loginContainer}>\r\n        <div className={s.login}>\r\n            <h1>Login</h1>\r\n            <LoginReduxFrom onSubmit={onSubmit} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginTC })(Login)","type ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = (props: ContactsPropsType) => {\r\n    return <div><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}\r\n\r\nexport default Contact;\r\n","import { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { ProfileType } from \"../../../Redux/profile_reducer\"\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\"\r\nimport { FormDataType } from \"../../Login/Login\"\r\n\r\ninterface ProfileDataFormType extends HTMLFormControlsCollection {\r\n    usernameInput: HTMLInputElement\r\n  }\r\ninterface ProfileDataFormType extends FormDataType {\r\n    initialValues: ProfileType\r\n}\r\n\r\n\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType>> = ({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            <div>\r\n                <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me</b>: {createField(\"About me\", \"aboutMee\", [], Textarea)}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileDataFormType>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, { useEffect, useState } from 'react';\r\n\r\ntype StatusProsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: StatusProsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}> {props.status || \"----\"} </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} />\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import { useState } from 'react';\r\nimport { ProfileType } from '../../../Redux/profile_reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { FormDataType } from '../../Login/Login';\r\nimport Contact from './Contacts';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: ({ }) => void\r\n    saveProfile: (formData: FormDataType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.content}>\r\n            <div className={classes.discriptionBlock}>\r\n                <span><img className={classes.ava} src={props.profile.photos.large || 'https://avatars.mds.yandex.net/i?id=6769d84f1f7e2020125db3dde0c3bef4-5876270-images-thumbs&n=13'} alt=\"ava\" /></span>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n                <span>I love this game</span>\r\n                {editMode\r\n                    ? <ProfileDataForm onSubmit={onSubmit} initialValues={props.profile} />\r\n                    : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={props.profile} isOwner={props.isOwner} />}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div><button onClick={props.goToEditMode}>edit</button></div>}\r\n            <div>\r\n                <b>Full name</b> : {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b> : {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b> : {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b> : {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b> : {Object.keys(props.profile.contacts).map((key: string) => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import { Dispatch } from \"redux\";\r\nimport { usersAPI, profileAPI } from \"../api/api\";\r\nimport { AppActionsType, AppStateType } from \"./redux-store\";\r\n\r\ninterface ContactsObjectKeys {\r\n    [key: string]: string\r\n}\r\n\r\ninterface ContactsType extends ContactsObjectKeys {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\nexport type ProfileType = {\r\n    id: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    photos: PhotoType\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport const profileInitialState: ProfilePageType = {\r\n    posts: [\r\n        { id: 1, message: \"Hi how are you?\", likesCount: 12 },\r\n        { id: 2, message: \"Hi!\", likesCount: 9 },\r\n        { id: 3, message: \"Go Dota?\", likesCount: 50 },\r\n        { id: 4, message: \"Yo!\", likesCount: 15 }\r\n    ] as Array<PostsType>,\r\n    newPostText: 'it-kamasutra.com',\r\n    profile: {\r\n        id: 'string',\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: 'string',\r\n        fullName: 'string',\r\n        photos: {\r\n            small: 'string',\r\n            large: 'string'\r\n        },\r\n        aboutMe: 'string',\r\n        contacts: {\r\n            github: 'string',\r\n            vk: 'string',\r\n            facebook: 'string',\r\n            instagram: 'string',\r\n            twitter: 'string',\r\n            website: 'string',\r\n            youtube: 'string',\r\n            mainLink: 'string',\r\n        },\r\n    },\r\n    status: 'string'\r\n}\r\n\r\nexport type ProfileActionsType = AddPostActionType | GetUserProfileActionType | SetStatusActionType | DeletePostActionCreator | SavePhotoSuccessActionType\r\n\r\nexport const profileReducer = (state: ProfilePageType = profileInitialState, action: AppActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostsType = { id: Date.now(), message: action.newPostText, likesCount: 0 };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \" \"\r\n            };\r\n        }\r\n        case DELETE_POST: {\r\n            return { ...state, posts: state.posts.filter(p => p.id != action.postId) }\r\n        }\r\n        /* case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            };\r\n        } */\r\n        case SET_STATUS: {\r\n            return { ...state, status: action.status };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile };\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//ActionCreators\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => ({ type: ADD_POST, newPostText });\r\nexport const deletePostAC = (postId: number): DeletePostActionCreator => ({ type: DELETE_POST, postId })\r\n/* export const updateNewPostTextActionCreator = (newPostText: string): UpdateNewPostTextActionType => ({type: UPDATE_NEW_POST_TEXT, newText: newPostText}); */\r\nexport const setUserProfileAC = (profile: ProfileType): GetUserProfileActionType => ({ type: SET_USER_PROFILE, profile });\r\nexport const setStatus = (status: string): SetStatusActionType => ({ type: SET_STATUS, status });\r\nexport const savePhotoSuccessAC = (photos: PhotoType): SavePhotoSuccessActionType => ({ type: SAVE_PHOTO_SUCCESS, photos });\r\n\r\n//Thunks\r\nexport const getStatus = (userId: number) => async (dispatch: Dispatch<SetStatusActionType>) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch<SetStatusActionType>) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch<GetUserProfileActionType>) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfileAC(response.data));\r\n}\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: Dispatch<SavePhotoSuccessActionType>) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccessAC(response.data.data.photos));\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: Dispatch<GetUserProfileActionType>, getState: () => AppStateType) => {\r\n    const userId = getState().auth.id\r\n    let response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUserProfileAC(response.data));\r\n    }\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\nexport type DeletePostActionCreator = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\n/* \r\nexport type UpdateNewPostTextActionType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n} */\r\nexport type SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport type GetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport type SavePhotoSuccessActionType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotoType\r\n}\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\n/* const UPDATE_NEW_POST_TEXT = 'profile/UPDATE-NEW-POST-TEXT'; */\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_STATUS = 'profile/SET_STATUS';\r\nconst DELETE_POST = 'profile/DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS'\r\nconst SAVE_PROFILE = 'profile/SAVE_PROFILE'\r\n\r\nexport default profileReducer;","import React, {Dispatch} from 'react'\r\nimport classes from './Post.module.css';\r\nimport {deletePostAC} from './../../../../Redux/profile_reducer'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\n\r\nconst Post = (props: PostsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    return (\r\n        <div className={classes.post}>\r\n            <img alt=\"avatar\" src=\"https://shutniki.club/wp-content/uploads/2019/12/v1-babay29.png\" />\r\n            {props.message}\r\n            <button className={classes.button} onClick={() => {dispatch(deletePostAC(props.id))}}> X </button>\r\n            <div>like {props.likesCount}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n\r\n","import React, { ChangeEvent } from 'react';\r\nimport classes from './Myposts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required, maxLengthCreator } from './../../../utils/validators/validators'\r\nimport { Textarea } from './../../common/FormsControls/FormsControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    addPost: (newPostText: string) => void\r\n    deletePost: (postId: number) => void\r\n}\r\n\r\nconst Myposts = (props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} id={p.id} />);\r\n\r\n    let onAddPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    /*     let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            props.updateNewPostText(e.currentTarget.value);\r\n        }\r\n     */\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddMyPostFormReduxFrom onSubmit={onAddPost} />\r\n            <div className={classes.post}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst AddNewPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]} type=\"textarea\" />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormReduxFrom = reduxForm<AddNewPostFormType>({ form: 'ProfileNewPostForm' })(AddNewPostForm)\r\n\r\nexport default Myposts;\r\n","import React, {Dispatch} from 'react';\r\nimport {addPostActionCreator, deletePostAC} from \"../../../Redux/profile_reducer\";\r\nimport Myposts from \"./Myposts\";\r\nimport { AppStateType } from '../../../Redux/redux-store';\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    deletePost: (postId: number) => void\r\n    /* updateNewPostText: (value: string)=> void */\r\n}\r\nlet mapStateToProps = (state: AppStateType): MyPostsPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n        deletePost: (postId: number) => {\r\n            dispatch(deletePostAC(postId))\r\n        }\r\n        \r\n        /*\r\n        updateNewPostText: (value: string) => {\r\n            dispatch(updateNewPostTextActionCreator(value))\r\n        } */\r\n    }\r\n}\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(Myposts);\r\n\r\nexport default MyPostContainer;\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostContainer from \"./Myposts/MypostsContainer\";\r\nimport { ProfileType } from '../../Redux/profile_reducer';\r\nimport { FormDataType } from '../Login/Login';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: () => void\r\n    saveProfile: (formData: FormDataType) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto} saveProfile={props.saveProfile} />\r\n            <MyPostContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from \"../../Redux/redux-store\";\r\nimport { getUserProfile, getStatus, updateStatus, ProfileType, savePhoto, saveProfile } from \"../../Redux/profile_reducer\";\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: () => void\r\n    saveProfile: () => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    match: any\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number\r\n\r\n}\r\nexport type ProfileContainerProsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerProsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        } if (!userId) {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        debugger\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(props: MapStateToPropsType) {\r\n        if (+this.props.match.params.userId != props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                />\r\n                \r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import { getAuthUserData } from \"./auth_reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS';\r\n\r\nexport type InitializedType = {\r\n    initialized: boolean\r\n}\r\nexport type InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nlet initialState: InitializedType = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: InitializedSuccessActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS}) as const\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(initializedSuccess());\r\n    });\r\n}\r\n\r\nexport default appReducer","import { AppActionsType } from \"./redux-store\";\r\n\r\nexport type SidebarType = {}\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state: SidebarType = initialState, action: AppActionsType) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileActionsType} from \"./profile_reducer\";\r\nimport dialogsReducer, {DialogActionsType} from \"./dialogs_reducer\";\r\nimport sidebarReducer from \"./sidebar_reducer\";\r\nimport usersReducer, {UsersActionsType} from \"./users-reducer\";\r\nimport authReducer, {AuthActionsType} from \"./auth_reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport appReducer from \"./app_reducer\";\r\n\r\nexport let rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n});\r\nexport type AppActionsType = ProfileActionsType | AuthActionsType | DialogActionsType | UsersActionsType\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport default store;","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Login from \"./components/Login/Login\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { initializeApp } from \"./Redux/app_reducer\";\r\nimport store, { AppStateType } from \"./Redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport s from \"./AppWrapper.module.css\";\r\nimport { Route } from 'react-router';\r\nimport { BrowserRouter, Switch } from 'react-router-dom';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\nexport type InitialPropsType = MapStateToPropsType & MapDispatchPropsType\r\n\r\nclass App extends React.Component<InitialPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <BrowserRouter>\r\n                <div className={s.appWrapper}>\r\n                    <div className={s.header}>\r\n                        <HeaderContainer />\r\n                    </div>\r\n\r\n                    <div className={s.content}>\r\n                        <div className={s.navbar}>\r\n                            <Navbar />\r\n                        </div>\r\n                        <div className={s.main}>\r\n                        <Route path=\"/login\" render={() => <Login/>}/>\r\n                        <Route path=\"/profile\" render={() => <ProfileContainer/>} />\r\n                            <Suspense fallback={<Preloader />}>\r\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>} />\r\n                            <Route path=\"/users\" render={() => <UsersContainer/>} />\r\n                            </Suspense>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter >);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(connect(mapStateToProps, { initializeApp }))(App);\r\n\r\nconst SamuraiJSApp = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer />\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default SamuraiJSApp\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport SamuraiJSApp from './App';\r\nimport './index.css';\r\n\r\n    ReactDOM.render(   \r\n              <SamuraiJSApp />\r\n         , document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n","type Validators = (value: string) => string | undefined\r\n\r\nexport const required: Validators = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): Validators => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"AppWrapper_appWrapper__16_Ne\",\"content\":\"AppWrapper_content__1dcJp\"};","export default __webpack_public_path__ + \"static/media/preloader.f555f7b3.svg\";","import preloader from './../../../preloader.svg';\r\n\r\nlet Preloader = () => {\r\n    return <div style={ {background: \"white\"}}>\r\n    <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1GF_s\",\"error\":\"FormsControls_error__2As49\",\"formSummaryError\":\"FormsControls_formSummaryError__qlfqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__1g1Th\",\"ava\":\"ProfileInfo_ava__nM46m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3dvmr\",\"loginBlock\":\"Header_loginBlock__32um6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__bJLhU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"Myposts_postBlock__1TKJj\",\"post\":\"Myposts_post__3_Le3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__11Rjs\",\"button\":\"Post_button__2enEn\"};"],"sourceRoot":""}