{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageText","dialogsItems","values","sendMessage","compose","connect","dispatch","sendMessageAC","withAuthRedirect"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,6FCiB/HC,EAVI,SAACC,GACpB,IAAIC,EAAO,aAAeD,EAAME,GAC5B,OACI,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACA,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCEnBC,EANC,SAACT,GACb,OACJ,qBAAKG,UAAWC,IAAQM,QAAxB,SAAkCV,EAAMU,W,kCCAlCC,EAAcC,YAAiB,IAgBxBC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAdL,SAACd,GAC3B,OACC,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACD,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcH,KAAK,iBAAiBe,YAAY,yBAEzG,8BACI,kDC+BWC,EAjCC,SAACxB,GACb,IAAIyB,EAAQzB,EAAM0B,WACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAiBN,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAC1E6B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,SAAcuB,EAAE/B,OAC9DuB,EAAMS,eAY3B,OACI,sBAAK/B,UAAWC,IAAQwB,QAAxB,UACI,qBAAKzB,UAAWC,IAAQ+B,aAAxB,SACKR,IAEL,sBAAKxB,UAAWC,IAAQ4B,SAAxB,UACI,8BAAMD,IACN,2BAIJ,cAAClB,EAAD,CAAqBG,SAfT,SAACoB,GACjBpC,EAAMqC,YAAYD,EAAOF,uB,yBCElBI,sBACXC,aAlBkB,SAACd,GACnB,MAAO,CACHC,WAAYD,EAAMC,eAID,SAACc,GACtB,MAAO,CACHH,YAAa,SAACH,GACVM,EAASC,YAAcP,SAU/BQ,IAFWJ,CAGbd","file":"static/js/4.1f63a562.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1gZK8\",\"dialogsItems\":\"Dialogs_dialogsItems__18-1C\",\"active\":\"Dialogs_active__1pW-1\",\"messages\":\"Dialogs_messages__FDxlD\"};","import {NavLink} from 'react-router-dom'\r\nimport classes from './../Dialogs.module.css'\r\n\r\ntype DialogsItenType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogsItenType) => {\r\nlet path = \"/dialogs/1\" + props.id\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n        </div> \r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return(\r\n<div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm = (props: InjectedFormProps<AddMessageFormType>) => {\r\n    return (\r\n     <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n        <Field component={Textarea} validate={[required, maxLength50]} name=\"newMessageText\" placeholder=\"Enter your message\" />\r\n    </div>\r\n<div>\r\n    <button>Send</button>\r\n</div>\r\n</form>\r\n)\r\n}\r\n\r\n\r\nexport const AddMessageReduxForm = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { DialogPageType } from '../../Redux/dialogs_reducer'\r\nimport { AddMessageForm, AddMessageReduxForm } from './AddMessageForm'\r\n\r\ntype PropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n    dialogPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype FormAddMessageType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n    let state = props.dialogPage;\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n    let newMessageText = state.newMessageText\r\n\r\n    /* \r\n        let onChangeMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {        // с Redux-Form нет необходимость использовать onChangeMessage\r\n            let text = e.target.value;\r\n            props.updateNewMessageBody(text)\r\n        }\r\n     */\r\n    let addNewMessage = (values: FormAddMessageType) => {\r\n        props.sendMessage(values.newMessageText);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n\r\n                </div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React, {Dispatch} from 'react'\r\nimport {sendMessageAC, DialogPageType} from \"./../../Redux/dialogs_reducer\"\r\nimport Dialogs from \"./Dialogs\";\r\nimport {AppStateType} from '../../Redux/redux-store';\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from 'redux';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: DialogPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(sendMessageAC(newMessageText))\r\n        }      \r\n    }\r\n}\r\n\r\n/*const DialogsContainer = withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\r\nexport default DialogsContainer */\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}