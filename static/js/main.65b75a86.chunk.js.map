{"version":3,"sources":["components/Profile/Myposts/Post/Post.module.css","components/Navbar/Navbar.module.css","hoc/withAuthRedirect.tsx","Redux/dialogs_reducer.tsx","utils/object-helper.ts","Redux/users-reducer.tsx","api/api.tsx","components/Header/Header.tsx","Redux/auth_reducer.tsx","components/Header/HeaderContainer.tsx","components/Navbar/Navbar.tsx","components/Login/Login.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/profile_reducer.tsx","components/Profile/Myposts/Post/Post.tsx","components/Profile/Myposts/Myposts.tsx","components/Profile/Myposts/MypostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","Redux/app_reducer.tsx","Redux/sidebar_reducer.tsx","Redux/redux-store.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","AppWrapper.module.css","preloader.svg","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Profile/Myposts/Myposts.module.css"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","SEND_MESSAGE","DELETE_MESSAGE","initialState","dialogs","id","name","messages","v1","message","newMessageText","sendMessageAC","type","dialogsReducer","action","text","filter","m","messageId","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","pageSize","totalUsersCount","page","isFetching","followingInProgress","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","followSuccess","userId","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","count","toggleIsFetching","toggleFollowingProgress","requestUsers","dispatch","a","usersAPI","getUsers","data","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","follow","bind","unfollow","usersReducer","followed","instance","axios","create","withCredentials","baseURL","headers","currentPage","get","then","responce","post","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","Header","className","classes","header","src","alt","loginBlock","onClick","SET_USER_DATA","setAuthUserData","getAuthUserData","response","authReducer","HeaderContainer","this","React","length","stopSubmit","_error","Navbar","nav","item","active","icon","fixedWidth","activeClassName","activeLink","LoginReduxFrom","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","required","style","formSummaryError","loginTC","formData","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileInfo","profile","content","discriptionBlock","img","Preloader","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","profileInitialState","posts","likesCount","newPostText","lookingForAJob","lookingForAJobDescription","fullName","deletePostAC","postId","profileReducer","newPost","Date","now","p","Post","useDispatch","button","maxLength10","maxLengthCreator","AddMyPostFormReduxFrom","Textarea","Myposts","postsElements","postBlock","values","addPost","MyPostContainer","profilePage","addPostActionCreator","deletePost","Profile","ProfileContainer","match","params","authorizedUserId","history","push","getUserProfile","compose","withRouter","INITIALIZED_SUCCESS","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","dialogPage","sidebar","usersPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","DialogsContainer","lazy","UsersContainer","App","initializeApp","s","appWrapper","navbar","main","path","render","fallback","AppContainer","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","FormControl","input","meta","children","hasError","touched","styles","formControl","maxLength","background","preloader"],"mappings":"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","file":"static/js/main.65b75a86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__11Rjs\",\"button\":\"Post_button__2enEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3gUxF\",\"item\":\"Navbar_item__3B_K_\"};","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = ( state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}","import { v1 } from \"uuid\"\r\n\r\n/* export type UpdateNewMessageTextType = {\r\n    type: 'dialogs/UPDATE-NEW-MESSAGE-TEXT'\r\n    newMessage: string\r\n} */\r\n\r\nexport type SendMessageType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageText: string\r\n}\r\nexport type DeleteMessageType = {\r\n    type: typeof DELETE_MESSAGE\r\n    messageId: string\r\n}\r\n\r\nexport const UPDATE_NEW_MESSAGE_TEXT = 'dialogs/UPDATE-NEW-MESSAGE-TEXT'\r\nexport const SEND_MESSAGE = 'dialogs/SEND-MESSAGE'\r\nexport const DELETE_MESSAGE = 'dialogs/DELETE-MESSAGE'\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: \"Dimych\" },\r\n        { id: 2, name: \"Sasha\" },\r\n        { id: 3, name: \"Andrey\" },\r\n        { id: 4, name: \"Sveta\" },\r\n        { id: 5, name: \"Igor\" }\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        { id: v1(), message: \"Hi!\" },\r\n        { id: v1(), message: \"Hello my frieds!\" },\r\n        { id: v1(), message: \"Go Dota?\" },\r\n        { id: v1(), message: \"Yes!\" },\r\n        { id: v1(), message: \"La-la-la\" }\r\n    ] as Array<MessageType>,\r\n    newMessageText: 'it-kamasutra.com'\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type DialogActionsType = SendMessageType | DeleteMessageType\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DialogActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        /*  case UPDATE_NEW_MESSAGE_TEXT:\r\n             return {\r\n                 ...state,\r\n                 newMessageText: action.newMessage\r\n             }; */\r\n        case SEND_MESSAGE:\r\n            let text = action.newMessageText\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, { id: v1(), message: text }],\r\n            };\r\n        case DELETE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m => m.id !== action.messageId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMessageText: string): SendMessageType => ({ type: SEND_MESSAGE, newMessageText })\r\nexport const deleteMessageAC = (messageId: string): DeleteMessageType => ({ type: DELETE_MESSAGE, messageId })\r\n\r\nexport default dialogsReducer;","import { UsersType } from \"../Redux/users-reducer\";\r\n\r\ninterface IFilters {\r\n    map(arg0: (u: any) => any): UsersType[];\r\n  }\r\n\r\nexport let updateObjectInArray = (items: IFilters, itemId: number, objPropName: string, newObjProps: {followed: boolean}) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { usersAPI } from \"../api/api\";\r\nimport { updateObjectInArray } from \"../utils/object-helper\";\r\n\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    name: string\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: Array<LocationType>\r\n    photos: PhotosType\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type UsersActionsType =\r\n    FollowActionType |\r\n    UnFollowActionType |\r\n    SetUsersActionType |\r\n    SetCurrentPageActionType |\r\n    SetTotalUsersCountActionType |\r\n    ToggleIsFetchingActionType |\r\n    ToggleIsFollowingProgressType\r\n\r\nexport type FollowActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\n\r\nexport type UnFollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\nexport type SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\n\r\nexport type SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    page: number\r\n}\r\n\r\nexport type SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\n\r\nexport type ToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ToggleIsFollowingProgressType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    page: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nconst FOLLOW = 'users/FOLLOW'\r\nconst UNFOLLOW = 'users/UNFOLLOW'\r\nconst SET_USERS = 'users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionsType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: true })\r\n                /*   users: state.users.map(u => {\r\n                      if (u.id === action.userId) {\r\n                          return { ...u, followed: true }\r\n                      }\r\n                      return u;\r\n                  }) */\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: false })\r\n                /*   users: state.users.map(u => {\r\n                      if (u.id === action.userId) {\r\n                          return { ...u, followed: false }\r\n                      }\r\n                      return u;\r\n                  }) */\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => ({ type: FOLLOW, userId })\r\nexport const unfollowSuccess = (userId: number) => ({ type: UNFOLLOW, userId })\r\nexport const setUsers = (users: Array<UsersType>) => ({ type: SET_USERS, users })\r\nexport const setCurrentPage = (page: number) => ({ type: SET_CURRENT_PAGE, page })\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\nexport const toggleIsFetching = (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page))\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\nconst followUnfollowFlow = async (dispatch: Dispatch<any>, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import axios from \"axios\";\r\nimport { UsersType } from \"./../Redux/users-reducer\"\r\n\r\ntype TypeofUsers = {\r\n    items: Array<UsersType>\r\n    error: string | null\r\n    totalCount: number\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { \"API-KEY\": \"809d50f8-0790-4db8-ac8b-7ff6bbc71c22\" }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<TypeofUsers>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(responce => {\r\n                return responce.data;\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete methot. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get('profile/' + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get('profile/status/' + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', { status: status });\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n\r\n    },\r\n    login(email: string, password:string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\n\r\ntype AuthType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => (dispatch: any) => void\r\n}\r\n\r\nconst Header = (props: AuthType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src='https://wp.nkdev.info/youplay/demo-shooter/wp-content/themes/youplay/assets/images/logo-light.png'\r\n                 alt={\"logo\"}/>\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import { authAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\n\r\nexport type DataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type SetUserActionType = {\r\n    type: typeof SET_USER_DATA\r\n    data: DataType\r\n}\r\n\r\nexport type AuthActionsType = SetUserActionType\r\n\r\nlet initialState: DataType = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({ type: SET_USER_DATA, data: { id, email, login, isAuth } }) as const\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<AuthActionsType>) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let { id, login, email } = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => async (dispatch: any) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n}\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", { _error: message }))\r\n    }\r\n}\r\n\r\nexport default authReducer","import React from 'react';\r\nimport Header from './Header'\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {logout} from \"../../Redux/auth_reducer\";\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: any\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type AuthMePropsType = MapStateToPropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<AuthMePropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import {NavLink} from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n            <FontAwesomeIcon icon={['fal', 'home']} fixedWidth /><NavLink to=\"/profile\" activeClassName={classes.activeLink}> Profile</NavLink>\r\n            </div>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to=\"/news \" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/musik\" activeClassName={classes.activeLink}> Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settigs\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { Input } from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginTC } from \"../../Redux/auth_reducer\";\r\nimport { Redirect } from \"react-router\";\r\nimport { AppStateType } from \"../../Redux/redux-store\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"email\"} name={\"email\"} component={Input} validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field type={\"password\"} placeholder={\"password\"} name={\"password\"} component={Input}\r\n                    validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"remember me\"} type={\"checkbox\"} /> remember me\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxFrom = reduxForm<FormDataType>({ form: 'login' })(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => { // в props придут все значения из data\r\n        props.loginTC(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxFrom onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginTC })(Login)","import React, { useEffect, useState } from 'react';\r\n\r\ntype StatusProsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: StatusProsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}> {props.status || \"----\"} </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} />\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {ProfileType} from './../ProfileContainer'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: PropsType) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={classes.content}>\r\n            <div><img src='https://the-flow.ru/uploads/images/resize/830x0/adaptiveResize/11/27/10/38/62/fbf218a40cd7.jpg'/></div>\r\n                <div className={classes.discriptionBlock}>\r\n                <span><img className={classes.img} src='https://avatars.mds.yandex.net/i?id=6769d84f1f7e2020125db3dde0c3bef4-5876270-images-thumbs&n=13' alt=\"profile Avatar\"/></span>\r\n                <span>I love this game</span>\r\n             \r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;\r\n","import { Dispatch } from \"redux\";\r\nimport { usersAPI, profileAPI } from \"../api/api\";\r\nimport { ProfileType } from \"../components/Profile/ProfileContainer\";\r\nimport { AppActionsType } from \"./redux-store\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type AddPostActionType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\nexport type DeletePostActionCreator = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\n/* \r\nexport type UpdateNewPostTextActionType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n} */\r\n\r\nexport type SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\n\r\nexport type SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\n/* const UPDATE_NEW_POST_TEXT = 'profile/UPDATE-NEW-POST-TEXT'; */\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_STATUS = 'profile/SET_STATUS';\r\nconst DELETE_POST = 'profile/DELETE_POST'\r\n\r\n\r\nexport const profileInitialState: ProfilePageType = {\r\n    posts: [\r\n        { id: 1, message: \"Hi how are you?\", likesCount: 12 },\r\n        { id: 2, message: \"Hi!\", likesCount: 9 },\r\n        { id: 3, message: \"Go Dota?\", likesCount: 50 },\r\n        { id: 4, message: \"Yo!\", likesCount: 15 }\r\n    ] as Array<PostsType>,\r\n    newPostText: 'it-kamasutra.com',\r\n    profile: {\r\n        id: 'string',\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: 'string',\r\n        fullName: 'string'\r\n    },\r\n    status: 'string'\r\n\r\n}\r\n\r\nexport type ProfileActionsType = AddPostActionType | SetUserProfileActionType | SetStatusActionType | DeletePostActionCreator\r\n\r\nexport const profileReducer = (state: ProfilePageType = profileInitialState, action: AppActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostsType = { id: Date.now(), message: action.newPostText, likesCount: 0 };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                //newPostText: \" \"\r\n            };\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n        /* case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            };\r\n        } */\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => ({\r\n    type: ADD_POST, newPostText\r\n});\r\nexport const deletePostAC = (postId: number): DeletePostActionCreator => ({\r\n    type: DELETE_POST, postId\r\n})\r\n/* export const updateNewPostTextActionCreator = (newPostText: string): UpdateNewPostTextActionType => ({\r\n    type: UPDATE_NEW_POST_TEXT, newText: newPostText\r\n}); */\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({\r\n    type: SET_USER_PROFILE, profile\r\n});\r\nexport const setStatus = (status: string): SetStatusActionType => ({\r\n    type: SET_STATUS, status\r\n});\r\n\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: Dispatch<SetStatusActionType>) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch<SetStatusActionType>) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch<SetUserProfileActionType>) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data));\r\n}\r\n\r\nexport default profileReducer;","import React, {Dispatch} from 'react'\r\nimport classes from './Post.module.css';\r\nimport {deletePostAC} from './../../../../Redux/profile_reducer'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\n\r\nconst Post = (props: PostsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    return (\r\n        <div className={classes.post}>\r\n            <img alt=\"avatar\" src=\"https://shutniki.club/wp-content/uploads/2019/12/v1-babay29.png\" />\r\n            {props.message}\r\n            <button className={classes.button} onClick={() => {dispatch(deletePostAC(props.id))}}> X </button>\r\n            <div>like {props.likesCount}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n\r\n","import React, { ChangeEvent } from 'react';\r\nimport classes from './Myposts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required, maxLengthCreator } from './../../../utils/validators/validators'\r\nimport { Textarea } from './../../common/FormsControls/FormsControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    addPost: (newPostText: string) => void\r\n    deletePost: (postId: number) => void\r\n}\r\n\r\nconst Myposts = (props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} id={p.id} />);\r\n\r\n    let onAddPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    /*     let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            props.updateNewPostText(e.currentTarget.value);\r\n        }\r\n     */\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddMyPostFormReduxFrom onSubmit={onAddPost} />\r\n            <div className={classes.post}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst AddNewPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]} type=\"textarea\" />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormReduxFrom = reduxForm<AddNewPostFormType>({ form: 'ProfileNewPostForm' })(AddNewPostForm)\r\n\r\nexport default Myposts;\r\n","import React, {Dispatch} from 'react';\r\nimport {addPostActionCreator, deletePostAC} from \"../../../Redux/profile_reducer\";\r\nimport Myposts from \"./Myposts\";\r\nimport { AppStateType } from '../../../Redux/redux-store';\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    deletePost: (postId: number) => void\r\n    /* updateNewPostText: (value: string)=> void */\r\n}\r\nlet mapStateToProps = (state: AppStateType): MyPostsPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n        deletePost: (postId: number) => {\r\n            dispatch(deletePostAC(postId))\r\n        }\r\n        \r\n        /*\r\n        updateNewPostText: (value: string) => {\r\n            dispatch(updateNewPostTextActionCreator(value))\r\n        } */\r\n    }\r\n}\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(Myposts);\r\n\r\nexport default MyPostContainer;\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\nimport MyPostContainer from \"./Myposts/MypostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {getUserProfile, getStatus, updateStatus} from \"../../Redux/profile_reducer\";\r\nimport {compose} from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\nexport type ProfileType = {\r\n    id: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    match: any\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number\r\n\r\n}\r\nexport type ProfileContainerProsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerProsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        } if (!userId) {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n/* let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\nexport default withAuthRedirect(connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent)) */\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import { getAuthUserData } from \"./auth_reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS';\r\n\r\nexport type InitializedType = {\r\n    initialized: boolean\r\n}\r\nexport type InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nlet initialState: InitializedType = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: InitializedSuccessActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS}) as const\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(initializedSuccess());\r\n    });\r\n}\r\n\r\nexport default appReducer","import { AppActionsType } from \"./redux-store\";\r\n\r\nexport type SidebarType = {}\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state: SidebarType = initialState, action: AppActionsType) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileActionsType} from \"./profile_reducer\";\r\nimport dialogsReducer, {DialogActionsType} from \"./dialogs_reducer\";\r\nimport sidebarReducer from \"./sidebar_reducer\";\r\nimport usersReducer, {UsersActionsType} from \"./users-reducer\";\r\nimport authReducer, {AuthActionsType} from \"./auth_reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport appReducer from \"./app_reducer\";\r\n\r\nexport let rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n});\r\nexport type AppActionsType = ProfileActionsType | AuthActionsType | DialogActionsType | UsersActionsType\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport default store;","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport { BrowserRouter, Route, withRouter } from \"react-router-dom\"\r\nimport Login from \"./components/Login/Login\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { initializeApp } from \"./Redux/app_reducer\";\r\nimport store, { AppStateType } from \"./Redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport s from \"./AppWrapper.module.css\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\nexport type InitialPropsType = MapStateToPropsType & MapDispatchPropsType\r\n\r\nclass App extends React.Component<InitialPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <BrowserRouter>\r\n                <div className={s.appWrapper}>\r\n                    <div className={s.header}>\r\n                        <HeaderContainer />\r\n                    </div>\r\n\r\n                    <div className={s.content}>\r\n                    <div className={s.navbar}>\r\n                        <Navbar />\r\n                    </div>\r\n\r\n                    <div className={s.main}>\r\n                        <Route path=\"/login\" render={() => <Login />} />\r\n                        <Route path=\"/profile\" render={() => <ProfileContainer />} />\r\n                        <Suspense fallback={<Preloader />}>\r\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer />} />\r\n                            <Route path=\"/users\" render={() => <UsersContainer />} />\r\n                        </Suspense>\r\n                    </div>\r\n                   \r\n                 \r\n                </div>\r\n            </div>\r\n            </BrowserRouter >);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App);\r\n\r\nconst SamuraiJSApp = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer />\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default SamuraiJSApp\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport SamuraiJSApp from './App';\r\nimport './index.css';\r\n\r\n    ReactDOM.render(   \r\n              <SamuraiJSApp />\r\n         , document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = ({input, meta, children}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \" \")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n","type Validators = (value: string) => string | undefined\r\n\r\nexport const required: Validators = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): Validators => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"AppWrapper_appWrapper__16_Ne\",\"content\":\"AppWrapper_content__1dcJp\"};","export default __webpack_public_path__ + \"static/media/preloader.f555f7b3.svg\";","import preloader from './../../../preloader.svg';\r\n\r\nlet Preloader = () => {\r\n    return <div style={ {background: \"white\"}}>\r\n    <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1GF_s\",\"error\":\"FormsControls_error__2As49\",\"formSummaryError\":\"FormsControls_formSummaryError__qlfqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2Gdx1\",\"discriptionBlock\":\"ProfileInfo_discriptionBlock__1g1Th\",\"img\":\"ProfileInfo_img__3evvj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3dvmr\",\"loginBlock\":\"Header_loginBlock__32um6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"Myposts_postBlock__1TKJj\",\"post\":\"Myposts_post__3_Le3\"};"],"sourceRoot":""}